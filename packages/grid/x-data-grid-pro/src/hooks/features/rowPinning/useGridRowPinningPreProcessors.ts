import * as React from 'react';
import {
  getRowIdFromRowModel,
  GridHydrateRowsValue,
  GridPipeProcessor,
  useGridRegisterPipeProcessor,
} from '@mui/x-data-grid/internals';
import { GridRowIdGetter, GridRowModel } from '@mui/x-data-grid';
import { GridApiPro } from '../../../models/gridApiPro';
import { DataGridProProcessedProps } from '../../../models/dataGridProProps';
import { GridPinnedRowsProp } from './gridRowPinningInterface';

type GridPinnedRowPosition = keyof GridPinnedRowsProp;

export function addPinnedRow(
  groupingParams: GridHydrateRowsValue,
  model: GridRowModel,
  getRowId: GridRowIdGetter | undefined,
  position: GridPinnedRowPosition,
  apiRef: React.MutableRefObject<GridApiPro>,
) {
  const idRowsLookup = { ...groupingParams.idRowsLookup };
  const tree = { ...groupingParams.tree };

  const id = getRowIdFromRowModel(model, getRowId);

  // TODO: warn if id is already present in `props.rows`
  idRowsLookup[id] = model;
  // Do not push it to ids list so that pagination is not affected by pinned rows
  // ids.push(id);
  tree[id] = {
    id,
    isAutoGenerated: false,
    parent: null,
    depth: 0,
    groupingKey: null,
    groupingField: null,
    isPinned: true,
    // position: 'footer',
  };

  apiRef.current.unstable_caches.rows.idRowsLookup[id] = { ...model };
  apiRef.current.unstable_caches.rows.idToIdLookup[id] = id;

  const previousPinnedRows = groupingParams.additionalRowGroups?.pinnedRows || {};

  return {
    ...groupingParams,
    idRowsLookup,
    tree,
    additionalRowGroups: {
      ...groupingParams.additionalRowGroups,
      pinnedRows: {
        ...previousPinnedRows,
        [position]: [
          ...(previousPinnedRows[position] || []),
          {
            id,
            model,
          },
        ],
      },
    },
  };
}

export const useGridRowPinningPreProcessors = (
  apiRef: React.MutableRefObject<GridApiPro>,
  props: Pick<DataGridProProcessedProps, 'pinnedRows' | 'getRowId'>,
) => {
  const addPinnedRows = React.useCallback<GridPipeProcessor<'hydrateRows'>>(
    (groupingParams) => {
      const pinnedRows = apiRef.current.unstable_caches.pinnedRows;
      const pinnedRowsTop = pinnedRows?.top || [];
      const pinnedRowsBottom = pinnedRows?.bottom || [];

      let newGroupingParams = {
        ...groupingParams,
        additionalRowGroups: {
          ...groupingParams.additionalRowGroups,
          // reset pinned rows state
          pinnedRows: {},
        },
      };

      pinnedRowsTop.forEach((row) => {
        newGroupingParams = addPinnedRow(newGroupingParams, row, props.getRowId, 'top', apiRef);
      });
      pinnedRowsBottom.forEach((row) => {
        newGroupingParams = addPinnedRow(newGroupingParams, row, props.getRowId, 'bottom', apiRef);
      });

      return newGroupingParams;
    },
    [apiRef, props.getRowId],
  );

  useGridRegisterPipeProcessor(apiRef, 'hydrateRows', addPinnedRows);
};
