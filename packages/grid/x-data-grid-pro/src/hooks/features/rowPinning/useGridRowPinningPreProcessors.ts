import * as React from 'react';
import { GridPipeProcessor, useGridRegisterPipeProcessor } from '@mui/x-data-grid/internals';
import { GridRowEntry } from '@mui/x-data-grid';
import { GridApiPro } from '../../../models/gridApiPro';
import { DataGridProProcessedProps } from '../../../models/dataGridProProps';
import { gridPinnedRowsSelector } from './gridRowPinningSelector';
import { rowPinningStateInitializer, mergeRowsStateWithPinnedRows } from './useGridRowPinning';

export const useGridRowPinningPreProcessors = (
  apiRef: React.MutableRefObject<GridApiPro>,
  props: Pick<DataGridProProcessedProps, 'pinnedRows' | 'getRowId'>,
) => {
  let pinnedRows = gridPinnedRowsSelector(apiRef);

  if (pinnedRows == null) {
    // Since the state is not ready yet lets use the initializer to get pinned rows.
    const initializedState = rowPinningStateInitializer(
      apiRef.current.state,
      { pinnedRows: props.pinnedRows, getRowId: props.getRowId },
      apiRef,
    ) as GridApiPro['state'];
    pinnedRows = gridPinnedRowsSelector(initializedState, apiRef.current.instanceId);
  }

  const addPinnedRows = React.useCallback<GridPipeProcessor<'hydrateRows'>>(
    (groupingParams) => {
      const pinnedRowsTop = pinnedRows?.top || [];
      const pinnedRowsBottom = pinnedRows?.bottom || [];

      // const ids = [...groupingParams.ids];
      const idRowsLookup = { ...groupingParams.idRowsLookup };
      const tree = { ...groupingParams.tree };

      function addRow(row: GridRowEntry) {
        const id = row.id;
        // TODO: warn if id is already present in `props.rows`
        idRowsLookup[id] = row.model;
        // Do not push it to ids list so that pagination is not affected by pinned rows
        // ids.push(id);
        tree[id] = {
          id,
          isAutoGenerated: false,
          parent: null,
          depth: 0,
          groupingKey: null,
          groupingField: null,
          isPinned: true,
        };

        apiRef.current.unstable_caches.rows.idRowsLookup[id] = { ...row.model };
        apiRef.current.unstable_caches.rows.idToIdLookup[id] = id;
      }

      pinnedRowsTop.forEach(addRow);
      pinnedRowsBottom.forEach(addRow);

      return mergeRowsStateWithPinnedRows(
        {
          ...groupingParams,
          idRowsLookup,
          tree,
        },
        pinnedRows || {},
      );
    },
    [apiRef, pinnedRows],
  );

  useGridRegisterPipeProcessor(apiRef, 'hydrateRows', addPinnedRows);
};
